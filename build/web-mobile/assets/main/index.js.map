{"version":3,"sources":["assets/script/bundleLoader.ts","assets/script/start.ts"],"names":["window","cc","assetManager","downloader","remoteServerAddress","REMOTE_SERVER_ROOT","bundleLoader","ENUM_BUNDLE","ENUM_BUNDLE_SAVE","exports","regLocalStorage","storageKey","target","propertyKey","Object","defineProperty","get","sys","localStorage","getItem","set","val","removeItem","setItem","_model","prototype","this","storeManifest","JSON","parse","value","stringify","checkBundleVersion","CC_PREVIEW","manifest","_a","sent","bundleName","getBundle","log","getRemoteBundleVersion","loadBundle","enumBundle","Promise","resolve","reject","cb","err","bundle","error","console","CC_JSB","Bundle","__decorate","model","bundleLoader_1","require","_decorator","ccclass","property","Helloworld","_super","__extends","start","load","loadScene","BASE","HALL","director","remoteManifest","error_1","scheduleOnce","_this","Component","default"],"mappings":"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","sourcesContent":["window[\"REMOTE_SERVER_ROOT\"] = cc.assetManager.downloader.remoteServerAddress;\r\nwindow[\"REMOTE_BUNDLE_MANIFEST\"] = REMOTE_SERVER_ROOT + 'remote/manifest.json';\r\n\r\nexport namespace bundleLoader {\r\n    export type TYPE_MANIFEST = { [key: string]: string }\r\n    export enum ENUM_BUNDLE {\r\n        BASE = '00_base',\r\n        HALL = '01_hall',\r\n        GAME = '02_game',\r\n    }\r\n\r\n    export const ENUM_BUNDLE_SAVE: { [key: string]: cc.AssetManager.Bundle } = {}\r\n\r\n}\r\n\r\n//注册持久存储\r\nfunction regLocalStorage(storageKey: string) {\r\n    return (target, propertyKey: string) => {\r\n        Object.defineProperty(target, propertyKey, {\r\n            get: function (): number {\r\n                return cc.sys.localStorage.getItem(storageKey);\r\n            },\r\n            set: function (val: string) {\r\n                if (val == null)\r\n                    cc.sys.localStorage.removeItem(storageKey);\r\n                else\r\n                    cc.sys.localStorage.setItem(storageKey, val);\r\n            },\r\n        });\r\n    }\r\n}\r\n\r\nexport namespace bundleLoader {\r\n\r\n    class _model {\r\n        @regLocalStorage(\"BUNDLE_MANIFEST\")\r\n        storeManifest: string;\r\n\r\n        get manifest(): TYPE_MANIFEST {\r\n            if (this.storeManifest == null) return null;\r\n            return JSON.parse(this.storeManifest);\r\n        }\r\n        set manifest(value: TYPE_MANIFEST) {\r\n            if (value == null) this.storeManifest = null;\r\n            else this.storeManifest = JSON.stringify(value);\r\n        }\r\n\r\n        //检查版本\r\n        async checkBundleVersion() {\r\n            if (CC_PREVIEW || !CC_JSB) return;\r\n            cc.log(`Bundle版本检查开始`);\r\n            let manifest = await this.getRemoteBundleVersion();\r\n            if (manifest == null) return false;\r\n            for (let bundleName in this.manifest) {\r\n                if (this.manifest[bundleName] != manifest[bundleName]) {\r\n                    if (cc.assetManager.getBundle(bundleName) != null) {\r\n                        cc.log(`bundle 存在更新 名：${bundleName} 当前版本:${this.manifest[bundleName]} 远程版本:${manifest[bundleName]}`);\r\n                        return true;\r\n                    }\r\n                }\r\n            }\r\n            cc.log(`Bundle版本检查完成`);\r\n            return false;\r\n        }\r\n\r\n        //获取版本\r\n        async getRemoteBundleVersion() {\r\n            if (CC_PREVIEW || !CC_JSB) return;\r\n            let manifest = await new Promise<TYPE_MANIFEST>((resolve, reject) => {\r\n                cc.assetManager.downloader['downloadFile'](REMOTE_BUNDLE_MANIFEST, { responseType: 'json' }, null, (err, manifest: TYPE_MANIFEST) => {\r\n                    if (err) {\r\n                        cc.error('获取远程版本错误' + JSON.stringify(err));\r\n                        resolve(null);\r\n                        return;\r\n                    }\r\n                    resolve(manifest)\r\n                });\r\n            });\r\n            return manifest;\r\n        }\r\n\r\n        async loadBundle(enumBundle: ENUM_BUNDLE) {\r\n            return new Promise<cc.AssetManager.Bundle>((resolve, reject) => {\r\n                let cb = (err, bundle: cc.AssetManager.Bundle) => {\r\n                    if (err) {\r\n                        cc.error('加载Bundle错误' + JSON.stringify(err));\r\n                        reject(err);\r\n                        return;\r\n                    }\r\n\r\n                    ENUM_BUNDLE_SAVE[enumBundle] = bundle;\r\n                    console.log(`bundle包${enumBundle}加载完成`)\r\n                    resolve(bundle);\r\n                };\r\n\r\n                if (CC_JSB && !CC_PREVIEW) {\r\n                    if (this.manifest[enumBundle] == null) throw '远程版本不存在';\r\n                    cc.assetManager.loadBundle(REMOTE_SERVER_ROOT + 'remote/' + enumBundle, { version: this.manifest[enumBundle] }, cb);\r\n                }\r\n                else {\r\n                    cc.assetManager.loadBundle(enumBundle, cb);\r\n                }\r\n            });\r\n        }\r\n\r\n\r\n        async Bundle(enumBundle: ENUM_BUNDLE) {\r\n\r\n\r\n        }\r\n    }\r\n\r\n    export const model = new _model();\r\n\r\n}","import { bundleLoader } from \"./bundleLoader\";\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class Helloworld extends cc.Component {\r\n\r\n    start() {\r\n        console.log(\"场景启动!\");\r\n        this.load();\r\n    }\r\n\r\n    async loadScene() {\r\n        await bundleLoader.model.loadBundle(bundleLoader.ENUM_BUNDLE.BASE);\r\n        await bundleLoader.model.loadBundle(bundleLoader.ENUM_BUNDLE.HALL);\r\n        cc.director.loadScene('hall');\r\n    }\r\n\r\n    async load() {\r\n        try {\r\n            let remoteManifest = await bundleLoader.model.getRemoteBundleVersion();\r\n            if (remoteManifest != null) bundleLoader.model.manifest = remoteManifest;\r\n            this.loadScene();\r\n        } catch (error) {\r\n            if (bundleLoader.model.manifest != null) {\r\n                this.loadScene();\r\n            } else {\r\n                cc.error('加载场景错误, 5 秒后重试' + JSON.stringify(error));\r\n                this.scheduleOnce(() => this.load(), 5);\r\n            }\r\n        }\r\n    }\r\n}\r\n"],"file":"index.js"}