{"version":3,"sources":["assets\\bundle\\02_game\\script\\config\\slider.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["\nimport ComponentBase from \"../../../00_base/script/common/ComponentBase\";\nimport { Big } from \"./big\";\nimport { DzUtils } from \"./dzUtils\";\n\nconst { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class slider extends ComponentBase {\n\n    @property(cc.Sprite)\n    Background: cc.Sprite = null;\n\n    @property(cc.Sprite)\n    Handle: cc.Sprite = null;\n\n    @property(cc.Label)\n    Handlelab: cc.Label = null;\n\n    private max: number\n\n    private min: number\n\n    public curValue: number\n\n    private backcall: Function = null\n\n\n    public _maxValue() {\n        \n        return this.max\n    }\n\n    public _minValue() {\n        return this.min\n    }\n\n    // LIFE-CYCLE CALLBACKS:\n\n    // onLoad () {}\n\n    start() {\n        this.node.on(\"slide\", this.evt_slide, this)\n        this.Handle.node.on(cc.Node.EventType.TOUCH_END, this.evt_touchend, this)\n        this.Handle.node.on(cc.Node.EventType.TOUCH_CANCEL, this.evt_touchend, this)\n        this.TouchOn(this.node.parent, this.evt_close, this)\n    }\n\n    init(max: number = 1, min: number = 0) {\n        this.max = max\n        this.min = min\n        this.curValue = min\n        this.node.getComponent(cc.Slider).progress = 0\n        this.setHandlelab(this.min)\n    }\n\n    evt_slide(e: cc.Slider) {\n        let _progress = e.progress\n        let accAddNum = Big.accSubtr(this.max, this.min)\n        let accDivNum = Big.accMul(accAddNum, _progress)\n        this.curValue = Number(Big.accAdd(accDivNum, this.min).toFixed(1))\n        if (_progress <= 0) {\n            this.curValue = this.min\n        }\n\n        if (_progress >= 1) {\n            this.curValue = this.max\n        }\n        this.backcall && this.backcall(this.curValue)\n        this.setHandlelab(this.curValue)\n\n    }\n\n    evt_touchend(e) {\n        this.backcall && this.backcall(this.curValue)\n    }\n\n    evt_close(e) {\n        this.node.parent.active = false\n        this.node.getComponent(cc.Slider).progress = 0\n        this.setHandlelab(this.min)\n    }\n\n\n    async setHandleSprite(url: string) {\n        this.Handle.spriteFrame = await DzUtils.loadPic(url) as cc.SpriteFrame\n    }\n\n    async setBackgroundSprite(url: string) {\n        this.Background.spriteFrame = await DzUtils.loadPic(url) as cc.SpriteFrame\n    }\n\n    setHandlelab(lab: number | string) {\n        if (this.Handlelab) {\n            this.Handlelab.string = \"\" + lab\n        }\n    }\n\n    setLabColor(value: string) {\n        this.Handlelab.node.color = DzUtils.colorOfString(value)\n    }\n\n    setCallback(fuc: Function, obj?: any) {\n        if (obj) {\n            this.backcall = fuc.bind(obj)\n        } else {\n            this.backcall = fuc\n        }\n    }\n\n    protected onDestroy(): void {\n        this.backcall = null\n        this.Handle.node.off(cc.Node.EventType.TOUCH_END, this.evt_touchend, this)\n        this.Handle.node.off(cc.Node.EventType.TOUCH_CANCEL, this.evt_touchend, this)\n    }\n\n    // update (dt) {}\n}\n"]}