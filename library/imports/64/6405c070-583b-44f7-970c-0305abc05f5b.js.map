{"version":3,"sources":["assets\\bundle\\02_game\\script\\config\\deskInfo.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import { UserInfo } from \"../../../01_hall/script/config/UserInfo\";\nimport { GamePlayerDeepRole, GamePlayerOverStatus, PlayerInfoStatus, TexasAction, TexasRound } from \"./gameConst\";\n\n\nclass deskInfo {\n    private static sing: deskInfo = null\n\n    public static get ins(): deskInfo {\n        if (this.sing == null) {\n            this.sing = new deskInfo();\n        }\n        return this.sing;\n    }\n\n    private players: { [id: number]: LplayerInfo } = {}\n\n    private seatPlayers: { [trueSeat: number]: DplayerInfo } = {}\n\n    public board: any[] = []\n\n    public deskId: number\n\n    public deskName: string\n\n    public playerBetTime: number\n\n    public boardNum: number\n\n    public pots: { [player: number]: number }[]\n\n    public round: number\n\n    public currRoundPlayerId: number\n\n    public isStartGame: boolean\n\n    public roundIsRun: boolean\n\n    public createDeskPlayerId: number\n\n    public seatLen: number = 9 //默认9（灯光角度数量与座位数一致\n\n    public readyPos: number = -1 //准备选择的位置\n\n    public curMyAcitons: { [action: string]: number } = {}\n\n\n    public setDeskInfo(data: any) {\n        this.deskId = data.deskId\n        this.deskName = data.deskName\n        this.playerBetTime = data.playerBetTime\n        this.boardNum = data.boardNum\n        this.board = data.board\n        this.pots = data.pots\n        this.round = data.round\n        this.currRoundPlayerId = data.currRoundPlayerId\n        this.isStartGame = data.isStartGame\n        this.roundIsRun = data.roundIsRun\n        this.createDeskPlayerId = data.createDeskPlayerId\n\n        data.playerList.forEach(lpalyer => {\n            this.setLplayer(lpalyer.id, lpalyer)\n        });\n\n        data.seatPlayerList.forEach(dplayer => {\n            this.setDplayer(dplayer.position, dplayer)\n        });\n    }\n\n    public setDplayer(seat: number, data: DplayerInfo) {\n        this.seatPlayers[seat] = data\n    }\n\n    public getDplayer(seat: number) {\n        if (this.seatPlayers[seat]) {\n            return this.seatPlayers[seat]\n        }\n        return null\n    }\n\n\n    public clearDplayer(seat: number) {\n        let seatP = this.seatPlayers[seat]\n        if (seatP) {\n            seatP.pot = 0\n            seatP.handsCard = []\n            seatP.curPositionRole = null\n            seatP.playerId = 0\n            seatP.status = PlayerInfoStatus.LEAVE\n        }\n    }\n\n    public setLplayer(id: number, data: LplayerInfo) {\n        this.players[id] = data\n    }\n\n    public getLplayer(id: number) {\n        if (this.players[id]) {\n            return this.players[id]\n        }\n        return null\n    }\n\n    public getMylplayer() {\n        for (let seat in this.players) {\n            if (this.players[seat] && this.players[seat].id == UserInfo.testuuid) {\n                return this.players[seat]\n            }\n        }\n    }\n\n    public getMydplayer() {\n        for (let seat in this.seatPlayers) {\n            if (this.seatPlayers[seat] && this.seatPlayers[seat].playerId == UserInfo.testuuid) {\n                return this.seatPlayers[seat]\n            }\n        }\n    }\n\n    public setplayerInfo(id: number, trueSeat: number, status: PlayerInfoStatus) {\n        let dplayer = DeskInfo.getDplayer(trueSeat)\n        dplayer.position = trueSeat\n        dplayer.status = status\n\n        let lpalyer = DeskInfo.getLplayer(id)\n        lpalyer.position = trueSeat\n        lpalyer.status = status\n    }\n\n\n\n}\n\n/** 桌内信息 */\nexport const DeskInfo = deskInfo.ins;\n\n/** 桌子内玩家信息 */\nexport interface LplayerInfo {   //\n    id: number\n    name: string\n    code: string\n    headPic: string\n    position: number//服务端真实玩家位置\n    //coneverSeat: number//客服端玩家位置\n    bankRoll: number,//金币\n    status: string //操作状态\n}\n\n/** 座位上玩家信息 */\nexport interface DplayerInfo {\n    playerId: number\n    pot: number\n    position: number//服务端真实玩家位置\n    coneverSeat?: number//客服端玩家位置\n    handsCard: Card[],//玩家手牌\n    status: string //操作状态\n    curPositionRole: GamePlayerDeepRole//\n}\n\n/** 游戏开始信息 */\nexport interface S_GameStart {\n    curPlayerId: number\n    betTime: number\n    boardNum: number\n    deskId: number\n    playerPots: { [player: number]: number }[]\n    seatPlayerList: DplayerInfo[] //玩家数据\n    actions: Action[]\n}\n\n\n/** 公共牌信息 */\nexport interface S_Board {\n    board: Card[]\n    nextPlayerId: number\n    nextBetTime: number\n    deskId: number\n    actions: Action[] //可操作行为\n    cardRankingInfo: Board_CardType //卡牌信息\n}\n\ninterface Board_CardType {\n    ranking: string//牌型信息（高牌等\n    cards: Card[] //对应牌型信息\n    winRate: number //赢率，万份制，ALLIN时才有该字段\n}\n\n/** 下注操作信息 */\nexport interface S_Bet {\n    round: TexasRound //当前回合 PRE_FLOP(\\\"翻牌前\\\"), FLOP(\\\"翻牌圈\\\"), TURN(\\\"转牌圈\\\"), RIVER(\\\"河牌圈\\\n    playerId: number //当前操作人\n    bankRoll: number\n    action: TexasAction // 当前操作\n    nextPlayerId: number //下位操作人（\n    nextBetTime: number\n    bet: number // 下注金额\n    deskId: number\n    actions: Action[] //可操作行为\n    playerPots: { [player: number]: number }[] //用户下注池\n    pots: number[] //总下注池\n\n    \n}\n\n\n/** 游戏结束信息 */\nexport interface S_GameOver {\n    board: Card[]\n    deskId: number\n    playerList: GameOverPlayerInfo //玩家得分集合\n}\n\n\ninterface GameOverPlayerInfo {\n    playerId: number\n    handsCard: Card[]\n    ranking: string //牌型\n    board: number //输赢记分牌\n    bankRoll: number //剩余记分牌\n    status: GamePlayerOverStatus // 输赢\n}\n\nexport interface Action {\n    action: TexasAction,\n    minBet: number\n}\n\ninterface Card {\n    value: number,\n    suit: string\n}\n\n\n"]}