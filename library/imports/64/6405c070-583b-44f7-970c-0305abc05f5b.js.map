{"version":3,"sources":["assets\\bundle\\02_game\\script\\config\\deskInfo.ts"],"names":[],"mappings":";;;;;;;AACA,8DAA6D;AAC7D,yCAAkH;AAGlH;IAAA;QAUY,YAAO,GAAkC,EAAE,CAAA;QAE3C,gBAAW,GAAwC,EAAE,CAAA;QAEtD,UAAK,GAAU,EAAE,CAAA;QAsBjB,YAAO,GAAW,CAAC,CAAA,CAAC,kBAAkB;QAEtC,aAAQ,GAAW,CAAC,CAAC,CAAA,CAAC,SAAS;QAE/B,iBAAY,GAAiC,EAAE,CAAA;IAuF1D,CAAC;IA5HG,sBAAkB,eAAG;aAArB;YACI,IAAI,IAAI,CAAC,IAAI,IAAI,IAAI,EAAE;gBACnB,IAAI,CAAC,IAAI,GAAG,IAAI,QAAQ,EAAE,CAAC;aAC9B;YACD,OAAO,IAAI,CAAC,IAAI,CAAC;QACrB,CAAC;;;OAAA;IAmCM,8BAAW,GAAlB,UAAmB,IAAS;QAA5B,iBAoBC;QAnBG,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAA;QACzB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAA;QAC7B,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,aAAa,CAAA;QACvC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAA;QAC7B,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAA;QACvB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAA;QACrB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAA;QACvB,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,iBAAiB,CAAA;QAC/C,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,CAAA;QACnC,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,CAAA;QACjC,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,kBAAkB,CAAA;QAEjD,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,UAAA,OAAO;YAC3B,KAAI,CAAC,UAAU,CAAC,OAAO,CAAC,EAAE,EAAE,OAAO,CAAC,CAAA;QACxC,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,UAAA,OAAO;YAC/B,KAAI,CAAC,UAAU,CAAC,OAAO,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAA;QAC9C,CAAC,CAAC,CAAC;IACP,CAAC;IAEM,6BAAU,GAAjB,UAAkB,IAAY,EAAE,IAAiB;QAC7C,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,GAAG,IAAI,CAAA;IACjC,CAAC;IAEM,6BAAU,GAAjB,UAAkB,IAAY;QAC1B,IAAI,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,EAAE;YACxB,OAAO,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAA;SAChC;QACD,OAAO,IAAI,CAAA;IACf,CAAC;IAGM,+BAAY,GAAnB,UAAoB,IAAY;QAC5B,IAAI,KAAK,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAA;QAClC,IAAI,KAAK,EAAE;YACP,KAAK,CAAC,GAAG,GAAG,CAAC,CAAA;YACb,KAAK,CAAC,SAAS,GAAG,EAAE,CAAA;YACpB,KAAK,CAAC,eAAe,GAAG,IAAI,CAAA;YAC5B,KAAK,CAAC,QAAQ,GAAG,CAAC,CAAA;YAClB,KAAK,CAAC,MAAM,GAAG,4BAAgB,CAAC,KAAK,CAAA;SACxC;IACL,CAAC;IAEM,6BAAU,GAAjB,UAAkB,EAAU,EAAE,IAAiB;QAC3C,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,GAAG,IAAI,CAAA;IAC3B,CAAC;IAEM,6BAAU,GAAjB,UAAkB,EAAU;QACxB,IAAI,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,EAAE;YAClB,OAAO,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,CAAA;SAC1B;QACD,OAAO,IAAI,CAAA;IACf,CAAC;IAEM,+BAAY,GAAnB;QACI,KAAK,IAAI,IAAI,IAAI,IAAI,CAAC,OAAO,EAAE;YAC3B,IAAI,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,EAAE,IAAI,eAAM,CAAC,GAAG,CAAC,QAAQ,EAAE;gBACpE,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAA;aAC5B;SACJ;IACL,CAAC;IAEM,+BAAY,GAAnB;QACI,KAAK,IAAI,IAAI,IAAI,IAAI,CAAC,WAAW,EAAE;YAC/B,IAAI,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,QAAQ,IAAI,eAAM,CAAC,GAAG,CAAC,QAAQ,EAAE;gBAClF,OAAO,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAA;aAChC;SACJ;IACL,CAAC;IAEM,gCAAa,GAApB,UAAqB,EAAU,EAAE,QAAgB,EAAE,MAAwB;QACvE,IAAI,OAAO,GAAG,gBAAQ,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAA;QAC3C,OAAO,CAAC,QAAQ,GAAG,QAAQ,CAAA;QAC3B,OAAO,CAAC,MAAM,GAAG,MAAM,CAAA;QAEvB,IAAI,OAAO,GAAG,gBAAQ,CAAC,UAAU,CAAC,EAAE,CAAC,CAAA;QACrC,OAAO,CAAC,QAAQ,GAAG,QAAQ,CAAA;QAC3B,OAAO,CAAC,MAAM,GAAG,MAAM,CAAA;IAC3B,CAAC;IA1Hc,aAAI,GAAa,IAAI,CAAA;IA8HxC,eAAC;CA/HD,AA+HC,IAAA;AAED,WAAW;AACE,QAAA,QAAQ,GAAG,QAAQ,CAAC,GAAG,CAAC","file":"","sourceRoot":"/","sourcesContent":["\r\nimport { C_User } from \"../../../01_hall/script/user/C_User\";\r\nimport { GamePlayerDeepRole, GamePlayerOverStatus, PlayerInfoStatus, TexasAction, TexasRound } from \"./gameConst\";\r\n\r\n\r\nclass deskInfo {\r\n    private static sing: deskInfo = null\r\n\r\n    public static get ins(): deskInfo {\r\n        if (this.sing == null) {\r\n            this.sing = new deskInfo();\r\n        }\r\n        return this.sing;\r\n    }\r\n\r\n    private players: { [id: number]: LplayerInfo } = {}\r\n\r\n    private seatPlayers: { [trueSeat: number]: DplayerInfo } = {}\r\n\r\n    public board: any[] = []\r\n\r\n    public deskId: number\r\n\r\n    public deskName: string\r\n\r\n    public playerBetTime: number\r\n\r\n    public boardNum: number\r\n\r\n    public pots: { [player: number]: number }[]\r\n\r\n    public round: number\r\n\r\n    public currRoundPlayerId: number\r\n\r\n    public isStartGame: boolean\r\n\r\n    public roundIsRun: boolean\r\n\r\n    public createDeskPlayerId: number\r\n\r\n    public seatLen: number = 9 //默认9（灯光角度数量与座位数一致\r\n\r\n    public readyPos: number = -1 //准备选择的位置\r\n\r\n    public curMyAcitons: { [action: string]: number } = {}\r\n\r\n\r\n    public setDeskInfo(data: any) {\r\n        this.deskId = data.deskId\r\n        this.deskName = data.deskName\r\n        this.playerBetTime = data.playerBetTime\r\n        this.boardNum = data.boardNum\r\n        this.board = data.board\r\n        this.pots = data.pots\r\n        this.round = data.round\r\n        this.currRoundPlayerId = data.currRoundPlayerId\r\n        this.isStartGame = data.isStartGame\r\n        this.roundIsRun = data.roundIsRun\r\n        this.createDeskPlayerId = data.createDeskPlayerId\r\n\r\n        data.playerList.forEach(lpalyer => {\r\n            this.setLplayer(lpalyer.id, lpalyer)\r\n        });\r\n\r\n        data.seatPlayerList.forEach(dplayer => {\r\n            this.setDplayer(dplayer.position, dplayer)\r\n        });\r\n    }\r\n\r\n    public setDplayer(seat: number, data: DplayerInfo) {\r\n        this.seatPlayers[seat] = data\r\n    }\r\n\r\n    public getDplayer(seat: number) {\r\n        if (this.seatPlayers[seat]) {\r\n            return this.seatPlayers[seat]\r\n        }\r\n        return null\r\n    }\r\n\r\n\r\n    public clearDplayer(seat: number) {\r\n        let seatP = this.seatPlayers[seat]\r\n        if (seatP) {\r\n            seatP.pot = 0\r\n            seatP.handsCard = []\r\n            seatP.curPositionRole = null\r\n            seatP.playerId = 0\r\n            seatP.status = PlayerInfoStatus.LEAVE\r\n        }\r\n    }\r\n\r\n    public setLplayer(id: number, data: LplayerInfo) {\r\n        this.players[id] = data\r\n    }\r\n\r\n    public getLplayer(id: number) {\r\n        if (this.players[id]) {\r\n            return this.players[id]\r\n        }\r\n        return null\r\n    }\r\n\r\n    public getMylplayer() {\r\n        for (let seat in this.players) {\r\n            if (this.players[seat] && this.players[seat].id == C_User.ins.testuuid) {\r\n                return this.players[seat]\r\n            }\r\n        }\r\n    }\r\n\r\n    public getMydplayer() {\r\n        for (let seat in this.seatPlayers) {\r\n            if (this.seatPlayers[seat] && this.seatPlayers[seat].playerId == C_User.ins.testuuid) {\r\n                return this.seatPlayers[seat]\r\n            }\r\n        }\r\n    }\r\n\r\n    public setplayerInfo(id: number, trueSeat: number, status: PlayerInfoStatus) {\r\n        let dplayer = DeskInfo.getDplayer(trueSeat)\r\n        dplayer.position = trueSeat\r\n        dplayer.status = status\r\n\r\n        let lpalyer = DeskInfo.getLplayer(id)\r\n        lpalyer.position = trueSeat\r\n        lpalyer.status = status\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\n/** 桌内信息 */\r\nexport const DeskInfo = deskInfo.ins;\r\n\r\n/** 桌子内玩家信息 */\r\nexport interface LplayerInfo {   //\r\n    id: number\r\n    name: string\r\n    code: string\r\n    headPic: string\r\n    position: number//服务端真实玩家位置\r\n    //coneverSeat: number//客服端玩家位置\r\n    bankRoll: number,//金币\r\n    status: string //操作状态\r\n}\r\n\r\n/** 座位上玩家信息 */\r\nexport interface DplayerInfo {\r\n    playerId: number\r\n    pot: number\r\n    position: number//服务端真实玩家位置\r\n    coneverSeat?: number//客服端玩家位置\r\n    handsCard: Card[],//玩家手牌\r\n    status: string //操作状态\r\n    curPositionRole: GamePlayerDeepRole//\r\n}\r\n\r\n/** 游戏开始信息 */\r\nexport interface S_GameStart {\r\n    curPlayerId: number\r\n    betTime: number\r\n    boardNum: number\r\n    deskId: number\r\n    playerPots: { [player: number]: number }[]\r\n    seatPlayerList: DplayerInfo[] //玩家数据\r\n    actions: Action[]\r\n}\r\n\r\n\r\n/** 公共牌信息 */\r\nexport interface S_Board {\r\n    board: Card[]\r\n    nextPlayerId: number\r\n    nextBetTime: number\r\n    deskId: number\r\n    actions: Action[] //可操作行为\r\n    cardRankingInfo: Board_CardType //卡牌信息\r\n}\r\n\r\ninterface Board_CardType {\r\n    ranking: string//牌型信息（高牌等\r\n    cards: Card[] //对应牌型信息\r\n    winRate: number //赢率，万份制，ALLIN时才有该字段\r\n}\r\n\r\n/** 下注操作信息 */\r\nexport interface S_Bet {\r\n    round: TexasRound //当前回合 PRE_FLOP(\\\"翻牌前\\\"), FLOP(\\\"翻牌圈\\\"), TURN(\\\"转牌圈\\\"), RIVER(\\\"河牌圈\\\r\n    playerId: number //当前操作人\r\n    bankRoll: number\r\n    action: TexasAction // 当前操作\r\n    nextPlayerId: number //下位操作人（\r\n    nextBetTime: number\r\n    bet: number // 下注金额\r\n    deskId: number\r\n    actions: Action[] //可操作行为\r\n    playerPots: { [player: number]: number }[] //用户下注池\r\n    pots: number[] //总下注池\r\n\r\n    \r\n}\r\n\r\n\r\n/** 游戏结束信息 */\r\nexport interface S_GameOver {\r\n    board: Card[]\r\n    deskId: number\r\n    playerList: GameOverPlayerInfo //玩家得分集合\r\n}\r\n\r\n\r\ninterface GameOverPlayerInfo {\r\n    playerId: number\r\n    handsCard: Card[]\r\n    ranking: string //牌型\r\n    board: number //输赢记分牌\r\n    bankRoll: number //剩余记分牌\r\n    status: GamePlayerOverStatus // 输赢\r\n}\r\n\r\nexport interface Action {\r\n    action: TexasAction,\r\n    minBet: number\r\n}\r\n\r\ninterface Card {\r\n    value: number,\r\n    suit: string\r\n}\r\n\r\n\r\n"]}